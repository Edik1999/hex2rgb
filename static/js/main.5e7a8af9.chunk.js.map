{"version":3,"sources":["components/Convertor.js","App.js","reportWebVitals.js","index.js"],"names":["Convertor","useState","value","form","setForm","hexToRgb","hex","result","exec","parseInt","length","document","querySelector","style","background","className","type","onChange","evt","prevForm","target","maxLength","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2NAsCeA,EApCG,WAEd,MAAwBC,mBAAS,CAC7BC,MAAO,KADX,mBAAOC,EAAP,KAAaC,EAAb,KAYA,SAASC,EAASC,GACd,IAAIC,EAAS,4CAA4CC,KAAKF,GAC9D,OAAOC,EAAM,cACJE,SAASF,EAAO,GAAI,IADhB,aACwBE,SAASF,EAAO,GAAI,IAD5C,aACoDE,SAASF,EAAO,GAAI,IADxE,KAEX,wCAGN,OAXyB,IAAtBJ,EAAKD,MAAMQ,SACVC,SAASC,cAAc,QAAQC,MAAMC,WAAaT,EAASF,EAAKD,QAWhE,uBAAMa,UAAU,OAAhB,UACI,uBACIC,KAAK,OACLd,MAAOC,EAAKD,MACZe,SApBS,SAAAC,GACjBd,GAAQ,SAAAe,GAAQ,kCAASA,GAAT,IAAmBjB,MAAOgB,EAAIE,OAAOlB,YAoB7CmB,UAAW,EACXC,YAAY,YAEjB,4BAA0B,IAAtBnB,EAAKD,MAAMQ,QAAgBL,EAASF,EAAKD,aCrBzCqB,MARf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,OCMSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,SAM1BZ,M","file":"static/js/main.5e7a8af9.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Convertor = () => {\n\n    const [form, setForm] = useState({\n        value: ''\n    });\n\n    const handleChange = evt => {\n        setForm(prevForm => ({...prevForm, value: evt.target.value}))\n    }\n\n    if(form.value.length === 7){\n        document.querySelector('.App').style.background = hexToRgb(form.value);\n    }\n\n    function hexToRgb(hex) {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result \n        ? `rgb(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)})` \n        : 'ошибка!';\n    }\n\n    return (\n        <form className=\"form\">\n            <input \n                type=\"text\" \n                value={form.value} \n                onChange={handleChange} \n                maxLength={7}\n                placeholder=\"#cccccc\"\n            />\n           <p>{form.value.length === 7 && hexToRgb(form.value)}</p>\n        </form>\n    );\n};\n\n\nexport default Convertor;\n","import './App.css';\nimport Convertor from './components/Convertor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Convertor/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}